name: Build GT-P3100 Lightweight ROM (Lineage 14.1 Based)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      ROM_BRANCH: lineage-14.1
      DEVICE_MAIN: p3100
      DEVICE_FALLBACK: espresso3g
      CCACHE_SIZE: 5G

    steps:
    # --------------------------
    # Checkout repo (your small repo w/ workflow)
    # --------------------------
    - name: Checkout repository
      uses: actions/checkout@v4

    # --------------------------
    # Free up disk space on runner (important!)
    # --------------------------
    - name: Free up runner space
      run: |
        echo "Freeing space..."
        sudo rm -rf /usr/share/dotnet || true
        sudo rm -rf /opt/ghc || true
        sudo rm -rf /opt/hostedtoolcache/CodeQL || true
        sudo apt-get clean
        df -h

    # --------------------------
    # Install build dependencies
    # --------------------------
    - name: Install build dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y \
          git-core gnupg flex bison build-essential zip curl \
          zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \
          lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev \
          libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig \
          python-is-python3 python3 bc ccache repo openjdk-8-jdk-headless openjdk-11-jdk-headless
        java -version
        df -h

    # --------------------------
    # Configure git (repo needs identity)
    # --------------------------
    - name: Configure git identity
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    # --------------------------
    # Prepare source root + local manifest
    # --------------------------
    - name: Prepare source root & local manifest
      run: |
        SRC=~/android/lineage
        mkdir -p "$SRC/.repo/local_manifests"
        cat > "$SRC/.repo/local_manifests/p3100.xml" <<'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <manifest>
          <!-- Device trees for Samsung Galaxy Tab 2 7.0 3G (GT-P3100 / espresso3g) -->
          <remote  name="lineage" fetch="https://github.com/LineageOS" />
          <remote  name="muppets" fetch="https://github.com/TheMuppets" />

          <!-- device -->
          <project path="device/samsung/espresso3g" name="android_device_samsung_espresso3g" remote="lineage" revision="lineage-14.1" />
          <project path="device/samsung/espresso-common" name="android_device_samsung_espresso-common" remote="lineage" revision="lineage-14.1" />
          <project path="device/samsung/omap4-common" name="android_device_samsung_omap4-common" remote="lineage" revision="lineage-14.1" />

          <!-- kernel -->
          <project path="kernel/samsung/omap4" name="android_kernel_samsung_omap4" remote="lineage" revision="lineage-14.1" />

          <!-- vendor blobs -->
          <project path="vendor/samsung" name="proprietary_vendor_samsung" remote="muppets" revision="lineage-14.1" />

        </manifest>
        EOF
        echo "Local manifest written:"
        cat "$SRC/.repo/local_manifests/p3100.xml" || true

    # --------------------------
    # Initialize & sync sources (with retries)
    # --------------------------
    - name: Initialize & sync sources
      run: |
        set -e
        SRC=~/android/lineage
        cd "$SRC"
        echo "repo init..."
        repo init -u https://github.com/LineageOS/android.git -b $ROM_BRANCH --git-lfs --depth=1
        echo "repo sync (1st attempt)..."
        if ! repo sync -c --no-tags --no-clone-bundle --optimized-fetch --prune -j4; then
          echo "repo sync retry #2..."
          sleep 60
          if ! repo sync -c --no-tags --no-clone-bundle --optimized-fetch --prune -j2; then
            echo "repo sync retry #3 (single thread)..."
            sleep 60
            repo sync -c --no-tags --no-clone-bundle --optimized-fetch --prune -j1
          fi
        fi
        echo "Sync done."
        df -h

    # --------------------------
    # Add lightweight remove_packages.mk to strip bloat
    # --------------------------
    - name: Inject lightweight config
      run: |
        SRC=~/android/lineage
        cat > "$SRC/remove_packages.mk" <<'EOF'
        # Remove unneeded packages to keep ROM light
        PRODUCT_PACKAGES := \
            Calendar \
            Email \
            Exchange2 \
            Gallery2 \
            BasicDreams \
            Browser \
            Music \
            MusicFX \
            HTMLViewer \
            LiveWallpapers \
            LiveWallpapersPicker \
            QuickSearchBox

        # NOTE: LineageOS does NOT include GApps by default.
        # User can sideload F-Droid + NewPipe for ad-free YouTube later.
        EOF
        echo "Lightweight package filter created:"
        cat "$SRC/remove_packages.mk" || true

    # --------------------------
    # Environment setup & device lunch
    # --------------------------
    - name: Environment setup & lunch
      run: |
        set +e
        SRC=~/android/lineage
        cd "$SRC"
        # Prefer Java 8 for lineage-14.1
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        export USE_CCACHE=1
        ccache -M $CCACHE_SIZE
        source build/envsetup.sh

        # Try main device
        lunch lineage_${DEVICE_MAIN}-userdebug 2>/dev/null
        if [ $? -ne 0 ]; then
          echo "Falling back to lineage_${DEVICE_FALLBACK}-userdebug..."
          lunch lineage_${DEVICE_FALLBACK}-userdebug
        fi

        # Attempt to include our lightweight mk in device product (best effort)
        PROD_MK="device/samsung/espresso3g/lineage_${DEVICE_FALLBACK}.mk"
        ALT_MK="device/samsung/${DEVICE_MAIN}/lineage_${DEVICE_MAIN}.mk"
        if [ -f "$PROD_MK" ]; then
          echo 'include $(TOPDIR)remove_packages.mk' >> "$PROD_MK"
        elif [ -f "$ALT_MK" ]; then
          echo 'include $(TOPDIR)remove_packages.mk' >> "$ALT_MK"
        else
          echo "Warning: could not auto-include remove_packages.mk; build will proceed default."
        fi

        df -h
        ccache -s || true

    # --------------------------
    # Build ROM (bacon) with fallback + log
    # --------------------------
    - name: Build ROM
      run: |
        set +e
        SRC=~/android/lineage
        cd "$SRC"
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        export USE_CCACHE=1
        echo "Starting parallel build..."
        mka bacon -j$(nproc) 2>&1 | tee build.log
        STATUS=${PIPESTATUS[0]}
        if [ $STATUS -ne 0 ]; then
          echo "Parallel build failed, retrying single-thread..."
          make bacon -j1 2>&1 | tee build_retry.log
        fi
        df -h
        ccache -s || true

    # --------------------------
    # Upload artifacts (any zips/images from product out dirs)
    # --------------------------
    - name: Upload ROM artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gtp3100-light-rom
        path: |
          ~/android/lineage/out/target/product/*/*.zip
          ~/android/lineage/out/target/product/*/recovery*.img
          ~/android/lineage/out/target/product/*/boot*.img
        if-no-files-found: warn
